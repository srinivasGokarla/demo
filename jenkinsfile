pipeline {
  agent any
    options {
    timestamps()
    ansiColor('xterm')
  }
  tools {
    nodejs 'nodejs-18'
  }
    triggers {
    // Optional: enable if you use GitHub webhooks instead
    // pollSCM('@daily')
  }

  environment {
    PATH = "${tool 'nodejs-18'}/bin:${env.PATH}"
    // Map from Jenkins credentials
    REACT_APP_FIREBASE_API_KEY = credentials('REACT_APP_FIREBASE_API_KEY')
    REACT_APP_FIREBASE_AUTH_DOMAIN = credentials('REACT_APP_FIREBASE_AUTH_DOMAIN')
    REACT_APP_FIREBASE_PROJECT_ID = credentials('REACT_APP_FIREBASE_PROJECT_ID')
    REACT_APP_FIREBASE_STORAGE_BUCKET = credentials('REACT_APP_FIREBASE_STORAGE_BUCKET')
    REACT_APP_FIREBASE_MESSAGING_SENDER_ID = credentials('REACT_APP_FIREBASE_MESSAGING_SENDER_ID')
    REACT_APP_FIREBASE_APP_ID = credentials('REACT_APP_FIREBASE_APP_ID')
    FIREBASE_TOKEN = credentials('FIREBASE_TOKEN')
        // E2E base URL (used by steps)
    TEST_BASE_URL = 'http://localhost:3000'
    CI = 'true'
  }

  stages {
    stage('Checkout') {
      when { branch 'main' }
      steps {
        checkout scm
      }
    }

      stage('Install Dependencies') {
      steps {
        sh 'node -v'
        sh 'npm -v'
        sh 'npm ci'
        // Install browsers + OS deps for Playwright
        sh 'npx playwright install --with-deps'
      }
    }


    stage('Create .env file') {
      steps {
        sh '''
        echo "REACT_APP_FIREBASE_API_KEY=${REACT_APP_FIREBASE_API_KEY}" >> .env
        echo "REACT_APP_FIREBASE_AUTH_DOMAIN=${REACT_APP_FIREBASE_AUTH_DOMAIN}" >> .env
        echo "REACT_APP_FIREBASE_PROJECT_ID=${REACT_APP_FIREBASE_PROJECT_ID}" >> .env
        echo "REACT_APP_FIREBASE_STORAGE_BUCKET=${REACT_APP_FIREBASE_STORAGE_BUCKET}" >> .env
        echo "REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${REACT_APP_FIREBASE_MESSAGING_SENDER_ID}" >> .env
        echo "REACT_APP_FIREBASE_APP_ID=${REACT_APP_FIREBASE_APP_ID}" >> .env
        '''
      }
    }

    stage('E2E Tests (Playwright + Cucumber)') {
      steps {
        // Start the static server from the build and run Cucumber once it's reachable
        sh 'npm run test:ci:with-server'
      }
      post {
        always {
          // Save reports even on failure
          junit allowEmptyResults: true, testResults: 'reports/junit.xml'
          archiveArtifacts artifacts: 'reports/**/*, cucumber-report.html, cucumber-report.json', allowEmptyArchive: true
        }
      }
    }

stage('Deploy to Firebase') {
      when { expression { currentBuild.currentResult == 'SUCCESS' } }
      steps {
        // Deploy only hosting by default (adjust if you also want rules/functions)
        sh 'npx firebase-tools deploy --only hosting --token "$FIREBASE_TOKEN"'
      }
    }
  }

  post {
    success {
      echo '✅ Build, tests and deploy succeeded.'
    }
    failure {
      echo '❌ Build or tests failed. No deploy performed.'
    }
  }
}